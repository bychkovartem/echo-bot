import psutil
import time

from bot.database.sqlite3 import db

class Format:
    def sizeof_fmt(num: int, suffix="B"):
        for unit in ["", "Ki", "Mi", "Gi", "Ti", "Pi", "Ei", "Zi"]:
            if abs(num) < 1024.0:
                return "%3.1f%s%s" % (num, unit, suffix)
            num /= 1024.0
        return "%.1f%s%s" % (num, "Yi", suffix)

    def timeof_fmt(seconds: int):
        periods = [("day", 86400), ("hour", 3600), ("minute", 60), ("second", 1)]
        result = ""
        for period_name, period_seconds in periods:
            if seconds >= period_seconds:
                period_value, seconds = divmod(seconds, period_seconds)
                result += f"{int(period_value)} {period_name} "
        return result

class GetText:
    def start():
        text = "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–∏–º–µ—Ä Telegram-–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —É –Ω–∞—Å.\n\n"
        text += "–Ø –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é –≠—Ö–æ-–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
        text += "üìÇ –ú–æ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∫–ª—é—á–∞–µ—Ç:</b>\n"
        text += "‚Äî –ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥).\n"
        text += "‚Äî –õ–æ–≥–∏–∫—É, –æ—Ç–¥–µ–ª–µ–Ω–Ω—É—é –æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è.\n"
        text += "‚Äî –ü–æ–¥–¥–µ—Ä–∂–∫—É –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏.\n\n"
        text += "<b><i>*–ó–∞–∫–∞–∑–∞—Ç—å Telegram –±–æ—Ç–∞ @artden_studio</i></b>"
        return text
    
    def help():
        text = "‚ÑπÔ∏è <b>–Ø –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –≠—Ö–æ-–±–æ—Ç.</b>\n\n"
        text += "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        text += "- –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start\n"
        text += "- –ü–æ–≤—Ç–æ—Ä—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        text += "üöÄ –ó–∞–∫–∞–∑–∞—Ç—å Telegram –±–æ—Ç–∞ <b>@artden_studio</b>"
        return text
    
    def admin_info(bot_info: dict):
        botStartTime = db.get_latest_log_entry(
            conditions={
                "action": "run"
            }
        )['created_at']
        cpu_usage = psutil.cpu_percent()
        total, used, free, disk = psutil.disk_usage("/")
        swap = psutil.swap_memory()
        memory = psutil.virtual_memory()
        boot_time = psutil.boot_time()
        
        text = f"\n\n<b>‚å¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ„Äå Stats @{bot_info['username']} „Äç‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚å¨</b>\n\n"
        text += f"<b>‚ï≠üñ•Ô∏è **CPU Usage ¬ª**</b>  __{cpu_usage}%__\n"
        text += f"<b>‚îúüíæ **RAM Usage ¬ª**</b>  __{memory.percent}%__\n"
        text += f"<b>‚ï∞üóÉÔ∏è **DISK Usage ¬ª**</b>  __{disk}%__\n\n"
        text += f"<b>‚ï≠üì§Upload:</b> {Format.sizeof_fmt(psutil.net_io_counters().bytes_sent)}\n"
        text += f"<b>‚ï∞üì•Download:</b> {Format.sizeof_fmt(psutil.net_io_counters().bytes_recv)}\n\n\n"
        text += f"<b>Memory Total:</b> {Format.sizeof_fmt(memory.total)}\n"
        text += f"<b>Memory Free:</b> {Format.sizeof_fmt(memory.available)}\n"
        text += f"<b>Memory Used:</b> {Format.sizeof_fmt(memory.used)}\n"
        text += f"<b>SWAP Total:</b> {Format.sizeof_fmt(swap.total)} | <b>SWAP Usage:</b> {swap.percent}%\n\n"
        text += f"<b>Total Disk Space:</b> {Format.sizeof_fmt(total)}\n"
        text += f"<b>Used:</b> {Format.sizeof_fmt(used)} | <b>Free:</b> {Format.sizeof_fmt(free)}\n\n"
        text += f"<b>Physical Cores:</b> {psutil.cpu_count(logical=False)}\n"
        text += f"<b>Total Cores:</b> {psutil.cpu_count(logical=True)}\n\n"
        text += f"ü§ñ<b>Bot Uptime:</b> {Format.timeof_fmt(time.time() - botStartTime)}\n"
        text += f"‚è≤Ô∏è<b>OS Uptime:</b> {Format.timeof_fmt(time.time() - boot_time)}\n"
        return text
